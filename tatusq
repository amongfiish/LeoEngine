[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 38cc63d..d90d49b 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -15,3 +15,4 @@[m [mLeoEngine.*[m
 CMakeCache.txt[m
 Makefile[m
 .DS_Store[m
[32m+[m[32mCMakeSettings.json[m
[1mdiff --git a/CMakeLists.txt b/CMakeLists.txt[m
[1mindex af396f2..fc2f636 100644[m
[1m--- a/CMakeLists.txt[m
[1m+++ b/CMakeLists.txt[m
[36m@@ -19,7 +19,7 @@[m [madd_subdirectory(lib/spdlog)[m
 [m
 file(GLOB SOURCES src/*.cpp)[m
 [m
[31m-add_library(${PROJECT_NAME} ${SOURCES})[m
[32m+[m[32madd_library(${PROJECT_NAME} ${SOURCES} "src/PartSprite.cpp" "src/PartTransform.cpp")[m
 [m
 include_directories(include)[m
 [m
[1mdiff --git a/include/LeoEngine/CameraFollow.hpp b/include/LeoEngine/CameraFollow.hpp[m
[1mindex 5818bf4..80cebdf 100644[m
[1m--- a/include/LeoEngine/CameraFollow.hpp[m
[1m+++ b/include/LeoEngine/CameraFollow.hpp[m
[36m@@ -10,13 +10,21 @@[m [mnamespace LeoEngine[m
     class CameraFollow : public Camera[m
     {[m
     public:[m
[31m-        CameraFollow(const Pair<double, double> *targetPosition);[m
[32m+[m[32m        CameraFollow();[m
         ~CameraFollow();[m
 [m
[32m+[m[32m        void setTargetPosition(const Pair<double, double> *targetPosition);[m
[32m+[m
[32m+[m[32m        void lockX(bool xLock);[m
[32m+[m[32m        void lockY(bool yLock);[m
[32m+[m
         virtual void update();[m
 [m
     private:[m
         const Pair<double, double> *_targetPosition;[m
[32m+[m
[32m+[m[32m        bool _xLock;[m
[32m+[m[32m        bool _yLock;[m
     };[m
 [m
 }[m
[1mdiff --git a/include/LeoEngine/Object.hpp b/include/LeoEngine/Object.hpp[m
[1mindex 5458433..fbe7763 100644[m
[1m--- a/include/LeoEngine/Object.hpp[m
[1m+++ b/include/LeoEngine/Object.hpp[m
[36m@@ -2,6 +2,7 @@[m
 #define OBJECT_HPP[m
 [m
 #include <vector>[m
[32m+[m[32m#include <stdexcept>[m
 #include "LeoEngine/Services.hpp"[m
 #include "LeoEngine/Logger.hpp"[m
 #include "LeoEngine/Part.hpp"[m
[36m@@ -18,7 +19,8 @@[m [mnamespace LeoEngine[m
 [m
         ~Object()[m
         {[m
[31m-            for (auto part : _parts) {[m
[32m+[m[32m            for (auto part : _parts)[m[41m [m
[32m+[m[32m            {[m
                 delete part;[m
             }[m
 [m
[36m@@ -27,14 +29,16 @@[m [mnamespace LeoEngine[m
 [m
         void update()[m
         {[m
[31m-            for (auto part : _parts) {[m
[32m+[m[32m            for (auto part : _parts)[m[41m [m
[32m+[m[32m            {[m
                 part->update();[m
             }[m
         }[m
 [m
         void draw()[m
         {[m
[31m-            for (auto part : _parts) {[m
[32m+[m[32m            for (auto part : _parts)[m
[32m+[m[32m            {[m
                 part->draw();[m
             }[m
         }[m
[36m@@ -44,14 +48,30 @@[m [mnamespace LeoEngine[m
         {[m
             T *newPart = new T;[m
             Part *castedNewPart = dynamic_cast<Part *>(newPart);[m
[31m-            if (castedNewPart == nullptr) {[m
[31m-                Services::get().getLogger()->error("Object", "Attempting to add non-part to parts.");[m
[31m-                return;[m
[32m+[m[32m            if (castedNewPart == nullptr)[m
[32m+[m[32m            {[m
[32m+[m[32m                Services::get().getLogger()->error("Object", "Attempting to add non-part to an object.");[m
[32m+[m[32m                return nullptr;[m
             }[m
 [m
             _parts.push_back(castedNewPart);[m
 [m
[31m-            return castedNewPart;[m
[32m+[m[32m            return newPart;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        template<class T>[m
[32m+[m[32m        T *getPart()[m
[32m+[m[32m        {[m
[32m+[m[32m            for (Part *part : _parts) {[m
[32m+[m[32m                T *castedPart = dynamic_cast<T *>(part);[m
[32m+[m[32m                if (castedPart != nullptr)[m
[32m+[m[32m                {[m
[32m+[m[32m                    return castedPart;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            Services::get().getLogger()->error("Object", "Attempting to retrieve part that doesn't exist in object.");[m
[32m+[m[32m            return nullptr;[m
         }[m
 [m
     private:[m
[1mdiff --git a/include/LeoEngine/Part.hpp b/include/LeoEngine/Part.hpp[m
[1mindex d18adf8..bd5b97e 100644[m
[1m--- a/include/LeoEngine/Part.hpp[m
[1m+++ b/include/LeoEngine/Part.hpp[m
[36m@@ -8,14 +8,12 @@[m [mnamespace LeoEngine[m
     class Part[m
     {[m
     public:[m
[31m-        virtual ~Part()[m
[31m-        {[m
[31m-        };[m
[32m+[m[32m        virtual ~Part() {}[m
 [m
[31m-        virtual void update() = 0;[m
[31m-        virtual void draw() = 0;[m
[32m+[m[32m        virtual void update() {}[m
[32m+[m[32m        virtual void draw() {}[m
 [m
[31m-    private:[m
[32m+[m[32m    protected:[m
         Part() = default;[m
     };[m
 [m
[1mdiff --git a/include/LeoEngine/Sprite.hpp b/include/LeoEngine/Sprite.hpp[m
[1mindex 8112035..53ca21c 100644[m
[1m--- a/include/LeoEngine/Sprite.hpp[m
[1m+++ b/include/LeoEngine/Sprite.hpp[m
[36m@@ -13,6 +13,7 @@[m [mnamespace LeoEngine[m
     class Sprite[m
     {[m
     public:[m
[32m+[m[32m        Sprite();[m
         Sprite(string textureFilename);[m
         Sprite(string textureFilename, TextureDrawData textureDrawData);[m
 [m
[36m@@ -21,6 +22,7 @@[m [mnamespace LeoEngine[m
         const TextureDrawData *getDrawData() const;[m
 [m
         void setPosition(int x, int y);[m
[32m+[m[32m        void setSize(int width, int height);[m
 [m
         void setSourceRectangle(shared_ptr<Rectangle> sourceRectangle);[m
         void setDestinationRectangle(shared_ptr<Rectangle> destinationRectangle);[m
[36m@@ -28,6 +30,8 @@[m [mnamespace LeoEngine[m
         void setCenter(shared_ptr<Pair<int, int>> center);[m
         void setFlip(FlipType flip);[m
 [m
[32m+[m[32m        void setTextureFilename(string filename);[m
[32m+[m
     private:[m
         string _textureFilename;[m
         TextureDrawData _textureDrawData;[m
[1mdiff --git a/lib/sdl_image b/lib/sdl_image[m
[1m--- a/lib/sdl_image[m
[1m+++ b/lib/sdl_image[m
[36m@@ -1 +1 @@[m
[31m-Subproject commit abcf63aa71b4e3ac32120fa9870a6500ddcdcc89[m
[32m+[m[32mSubproject commit abcf63aa71b4e3ac32120fa9870a6500ddcdcc89-dirty[m
[1mdiff --git a/lib/sdl_mixer b/lib/sdl_mixer[m
[1m--- a/lib/sdl_mixer[m
[1m+++ b/lib/sdl_mixer[m
[36m@@ -1 +1 @@[m
[31m-Subproject commit a37e09f85d321a13dfcf0d4432827ee09beeb623[m
[32m+[m[32mSubproject commit a37e09f85d321a13dfcf0d4432827ee09beeb623-dirty[m
[1mdiff --git a/lib/sdl_ttf b/lib/sdl_ttf[m
[1m--- a/lib/sdl_ttf[m
[1m+++ b/lib/sdl_ttf[m
[36m@@ -1 +1 @@[m
[31m-Subproject commit 4a318f8dfaa1bb6f10e0c5e54052e25d3c7f3440[m
[32m+[m[32mSubproject commit 4a318f8dfaa1bb6f10e0c5e54052e25d3c7f3440-dirty[m
[1mdiff --git a/src/CameraFollow.cpp b/src/CameraFollow.cpp[m
[1mindex b1293d3..4c3aa72 100644[m
[1m--- a/src/CameraFollow.cpp[m
[1m+++ b/src/CameraFollow.cpp[m
[36m@@ -3,21 +3,46 @@[m
 namespace LeoEngine[m
 {[m
 [m
[31m-    CameraFollow::CameraFollow(const Pair<double, double> *targetPosition)[m
[31m-        : _targetPosition(targetPosition)[m
[32m+[m[32m    CameraFollow::CameraFollow()[m
[32m+[m[32m        : _targetPosition(nullptr),[m
[32m+[m[32m          _xLock(false),[m
[32m+[m[32m          _yLock(false)[m
[32m+[m[32m    {}[m
[32m+[m
[32m+[m[32m    CameraFollow::~CameraFollow()[m
[32m+[m[32m    {}[m
[32m+[m
[32m+[m[32m    void CameraFollow::setTargetPosition(const Pair<double, double> *targetPosition)[m
     {[m
[31m-        [m
[32m+[m[32m        _targetPosition = targetPosition;[m
     }[m
 [m
[31m-    CameraFollow::~CameraFollow()[m
[32m+[m[32m    void CameraFollow::lockX(bool xLock)[m
     {[m
[32m+[m[32m        _xLock = xLock;[m
[32m+[m[32m    }[m
 [m
[32m+[m[32m    void CameraFollow::lockY(bool yLock)[m
[32m+[m[32m    {[m
[32m+[m[32m        _yLock = yLock;[m
     }[m
 [m
     void CameraFollow::update()[m
     {[m
[31m-        _position.first = _targetPosition->first;[m
[31m-        _position.second = _targetPosition->second;[m
[32m+[m[32m        if (!_targetPosition)[m
[32m+[m[32m        {[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        if (!_xLock)[m
[32m+[m[32m        {[m
[32m+[m[32m            _position.first = _targetPosition->first;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        if (!_yLock)[m
[32m+[m[32m        {[m
[32m+[m[32m            _position.second = _targetPosition->second;[m
[32m+[m[32m        }[m
     }[m
 [m
 }[m
[1mdiff --git a/src/Input.cpp b/src/Input.cpp[m
[1mindex a609f3f..6373cd6 100644[m
[1m--- a/src/Input.cpp[m
[1m+++ b/src/Input.cpp[m
[36m@@ -13,10 +13,10 @@[m [mnamespace LeoEngine[m
 {[m
 [m
     Input::Input(Events *events)[m
[31m-        : _events(events),[m
[31m-        _mousePosition(0, 0),[m
[31m-        _mouseButtons(10, KeyState::RELEASED),[m
[31m-        _mouseWheelMotion(0, 0)[m
[32m+[m[32m        :   _events(events),[m
[32m+[m[32m            _mousePosition(0, 0),[m
[32m+[m[32m            _mouseButtons(10, KeyState::RELEASED),[m
[32m+[m[32m            _mouseWheelMotion(0, 0)[m
     {[m
         // initialize SDL joystick subsystem[m
         if (SDL_InitSubSystem(SDL_INIT_JOYSTICK) < 0)[m
[36m@@ -55,7 +55,13 @@[m [mnamespace LeoEngine[m
 [m
     KeyState Input::getKeyState(KeyCode keyCode) const[m
     {[m
[31m-        return _keyStates.at(keyCode);   [m
[32m+[m[32m        auto foundKeyState = _keyStates.find(keyCode);[m
[32m+[m[32m        if (foundKeyState != _keyStates.end())[m
[32m+[m[32m        {[m
[32m+[m[32m            return foundKeyState->second;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return KeyState::RELEASED;[m
     }[m
 [m
     const Pair<int, int>& Input::getMousePosition() const[m
[36m@@ -111,7 +117,7 @@[m [mnamespace LeoEngine[m
                 }[m
                 else[m
                 {[m
[31m-                    _keyStates.at(castEvent->keyCode) = KeyState::PRESSED;[m
[32m+[m[32m                    _keyStates.at(castEvent->keyCode) = KeyState::RELEASED;[m
                 }[m
 [m
                 break;[m
[1mdiff --git a/src/Sprite.cpp b/src/Sprite.cpp[m
[1mindex 89fafcd..ee16118 100644[m
[1m--- a/src/Sprite.cpp[m
[1m+++ b/src/Sprite.cpp[m
[36m@@ -5,6 +5,11 @@[m
 namespace LeoEngine[m
 {[m
 [m
[32m+[m[32m    Sprite::Sprite()[m
[32m+[m[32m    {[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
     Sprite::Sprite(string textureFilename)[m
         : _textureFilename(textureFilename)[m
     {[m
[36m@@ -13,7 +18,7 @@[m [mnamespace LeoEngine[m
 [m
     Sprite::Sprite(string textureFilename, TextureDrawData textureDrawData)[m
         : _textureFilename(textureFilename),[m
[31m-        _textureDrawData(textureDrawData)[m
[32m+[m[32m          _textureDrawData(textureDrawData)[m
     {[m
 [m
     }[m
[36m@@ -32,6 +37,7 @@[m [mnamespace LeoEngine[m
     {[m
         if (_textureDrawData.destinationRectangle == nullptr)[m
         {[m
[32m+[m[32m            _textureDrawData.destinationRectangle = make_shared<Rectangle>(x, y, 0, 0);[m
             return;[m
         }[m
 [m
[36m@@ -43,6 +49,7 @@[m [mnamespace LeoEngine[m
     {[m
         if (_textureDrawData.destinationRectangle == nullptr)[m
         {[m
[32m+[m[32m            _textureDrawData.destinationRectangle = make_shared<Rectangle>(0, 0, width, height);[m
             return;[m
         }[m
 [m
[36m@@ -75,4 +82,9 @@[m [mnamespace LeoEngine[m
         _textureDrawData.flip = flip;[m
     }[m
 [m
[32m+[m[32m    void Sprite::setTextureFilename(string filename)[m
[32m+[m[32m    {[m
[32m+[m[32m        _textureFilename = filename;[m
[32m+[m[32m    }[m
[32m+[m
 }[m
