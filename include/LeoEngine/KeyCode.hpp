#ifndef KEY_CODE_HPP
#define KEY_CODE_HPP

#if defined(__linux__) || defined(__APPLE__)
    #include <SDL2/SDL.h>
#elif defined(_WIN32)
    #include <SDL.h>
#endif

namespace LeoEngine
{

    constexpr int NUMBER_OF_KEY_CODES = 127;

    enum class KeyCode
    {
        BACKSPACE = '\b',
        TAB = '\t',
        CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR),
        RETURN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN),
        PAUSE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE),
        ESCAPE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ESCAPE),
        SPACE = ' ',
        EXCLAIMATION_MARK = '!',
        DOUBLE_QUOTE = '"',
        HASH = '#',
        DOLLAR_SIGN = '$',
        AMPERSAND = '&',
        SINGLE_QUOTE = '\'',
        LEFT_PARENTHESIS = '(',
        RIGHT_PARENTHESIS = ')',
        ASTERISK = '*',
        PLUS_SIGN = '+',
        COMMA = ',',
        MINUS_SIGN = '-',
        PERIOD = '.',
        FORWARD_SLASH = '/',
        ZERO = '0',
        ONE = '1',
        TWO = '2',
        THREE = '3',
        FOUR = '4',
        FIVE = '5',
        SIX = '6',
        SEVEN = '7',
        EIGHT = '8',
        NINE = '9',
        COLON = ':',
        SEMICOLON = ';',
        LESS_THAN = '<',
        EQUAL_SIGN = '=',
        GREATER_THAN = '>',
        QUESTION_MARK = '?',
        AT_SIGN = '@',
        LEFT_SQUARE_BRACKET = '[',
        BACK_SLASH = '\\',
        RIGHT_SQUARE_BRACKET = ']',
        CARET = '^',
        UNDERSCORE = '_',
        BACKTICK = '`',
        A = 'a',
        B = 'b',
        C = 'c',
        D = 'd',
        E = 'e',
        F = 'f',
        G = 'g',
        H = 'h',
        I = 'i',
        J = 'j',
        K = 'k',
        L = 'l',
        M = 'm',
        N = 'n',
        O = 'o',
        P = 'p',
        Q = 'q',
        R = 'r',
        S = 's',
        T = 't',
        U = 'u',
        V = 'v',
        W = 'w',
        X = 'x',
        Y = 'y',
        Z = 'z',
        DELETE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DELETE),
        NUMPAD_ZERO = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0),
        NUMPAD_ONE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1),
        NUMPAD_TWO = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2),
        NUMPAD_THREE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3),
        NUMPAD_FOUR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4),
        NUMPAD_FIVE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5),
        NUMPAD_SIX = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6),
        NUMPAD_SEVEN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7),
        NUMPAD_EIGHT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8),
        NUMPAD_NINE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9),
        NUMPAD_PERIOD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD),
        NUMPAD_FORWARD_SLASH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE),
        NUMPAD_ASTERISK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY),
        NUMPAD_MINUS_SIGN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS),
        NUMPAD_PLUS_SIGN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS),
        NUMPAD_ENTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER),
        NUMPAD_EQUAL_SIGN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS),
        UP_ARROW = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP),
        DOWN_ARROW = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN),
        RIGHT_ARROW = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT),
        LEFT_ARROW = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT),
        INSERT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT),
        HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME),
        END = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END),
        PAGE_UP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP),
        PAGE_DOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN),
        F1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1),
        F2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2),
        F3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3),
        F4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4),
        F5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5),
        F6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6),
        F7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7),
        F8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8),
        F9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9),
        F10 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10),
        F11 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11),
        F12 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12),
        F13 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13),
        F14 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14),
        F15 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15),
        NUM_LOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR),
        CAPS_LOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK),
        SCROLL_LOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK),
        RIGHT_SHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT),
        LEFT_SHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT),
        RIGHT_CONTROL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL),
        LEFT_CONTROL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL),
        RIGHT_ALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT),
        LEFT_ALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT),
        MODE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE),
        HELP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP),
        PRINT_SCREEN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN),
        SYSRQ = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ),
        MENU = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU),
        POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER)
    };

}

#endif

